using CommunicationChannel;
using System;
using static CommunicationChannel.Channel;
using static CommunicationChannel.CommandsForServer;
using System.Diagnostics;
namespace EncryptedMessaging.DataChannel
{
    public abstract class ChannelBase : IChannel
    {

        public abstract void ReEstablishConnection();

        #region internal element

        internal ulong MyId;
        internal OnErrorEvent OnError;
        internal int Domain;
        internal Uri ServerUri;

        /// <summary>
        /// Event that is executed when a message is received from the server/router.
        /// These are messages generated by other clients that have been redirected by the router to this device.
        /// </summary>
        public Action<ulong, byte[]> OnMessageReceived { get; set; }
        internal Action<uint> OnDataDeliveryConfirm;

        #endregion

        public bool IsConnected
        {
            get => _IsConnected;
            internal set
            {
                if (_IsConnected != value)
                {
                    _IsConnected = value;
                    OnRouterConnectionChange?.Invoke(value);
                }
            }
        }

        public virtual bool HasConnectivity { get { return _HasConnectivity; } internal set { _HasConnectivity = value; }  }

        internal static bool _HasConnectivity;


        private bool _IsConnected;

        public Protocol.Command LastCommandIN { get; internal set; }

        public Protocol.Command LastCommandOUT { get; internal set; }

        public DateTime LastIN { get; internal set; }

        public DateTime LastOUT { get; internal set; }

        public bool LicenseExpired => false;

        public bool Logged => IsConnected;


        public Action<bool> OnRouterConnectionChange { get; set; }


        #region IO methods

        /// <summary>
        /// Send data to the server/router.
        /// Sends a data packet that the server/router will resend to its destination.
        /// </summary>
        /// <param name="chatId">chat to which data belong to</param>
        /// <param name="dataToSend">data</param>
        /// <param name="directlyWithoutSpooler"> if you want to send directly without spooler make it true else false </param>
        public void SendPostToServer(ulong chatId, byte[] dataToSend, bool directlyWithoutSpooler = false)
        {
            // Send data to the server in the format:
            // [0] + [1][2][3][4][5][6][7][8] + [9..]
            // command + chatId + data

            lock (this)
            {

                byte[] data = new byte[dataToSend.Length + 1 + 8];
                data[0] = (byte)Protocol.Command.Data;
                Buffer.BlockCopy(Converter.GetBytes(chatId), 0, data, 1, 8); // chatId in bytes
                Buffer.BlockCopy(dataToSend, 0, data, 9, dataToSend.Length); // data in bytes
                SendDataToRouter(data, directlyWithoutSpooler ? DataFlags.DirectlyWithoutSpooler : DataFlags.None);
            }
        }

        /// <summary>
        /// Sends a data packet addressed to the router/server. This data packet will be interpreted by the router based on the function that is passed to the router when it is initialized. If no function is passed during initialization, sending data to the router will have no effect.
        /// </summary>
        /// <param name="dataToSend"></param>
        public void SendRouterData(byte[] dataToSend)
        {
            // Send data to the server in the format:
            // [0] + [9..]
            // command + data
            byte[] data = new byte[dataToSend.Length + 1];
            data[0] = (byte)Protocol.Command.RouterData;
            Buffer.BlockCopy(dataToSend, 0, data, 1, dataToSend.Length);
            SendDataToRouter(data, DataFlags.DirectlyWithoutSpooler);
        }
        internal abstract void SendDataToRouter(byte[] data, DataFlags dataFlags);


        #endregion

        internal ErrorType OnDataReceives(byte[] incomingData)
        {
            Protocol.Command command = default;
            if (incomingData.Length == 0)
            {
                return ErrorType.WrongDataLength;
            }
            if (!Enum.IsDefined(typeof(Protocol.Command), incomingData[0]))
            {
                return ErrorType.CommandNotSupported;
            }
            command = (Protocol.Command)incomingData[0];
            LastCommandIN = command;
            LastIN = DateTime.UtcNow;
            if (command == Protocol.Command.DataReceivedConfirmation)
            {
                Debugger.Break(); // not need with this protocol
                if (incomingData.Length != 5)
                {
                    return ErrorType.WrongDataLength;
                }
                var dataId = BitConverter.ToUInt32(incomingData, 1);
                OnDataDeliveryConfirm?.Invoke(dataId);
            }
            else if (command == Protocol.Command.Ping) // Pinging from the server does not reset the connection timeout, otherwise, if the pings occur frequently, the connection will never be closed
            {
                Debugger.Break(); // not need with this protocol
            }
            else if (command == Protocol.Command.Data)
            {
                var chatId = Converter.BytesToUlong(incomingData.Skip(1).Take(8));
                var post = incomingData.Skip(9);
                OnMessageReceived(chatId, post);
            }
            else if (command == Protocol.Command.ConnectionEstablished)
            {
                // no action
            }
            else if (command == Protocol.Command.RouterData)
            {
                OnDataRouterReceived?.Invoke(incomingData);
            }
            return ErrorType.None;
        }

        /// <summary>
        /// Event that is executed when receiving data generated by the router (the server)
        /// Event that is executed when receiving data generated by the router (the server)
        /// </summary>
        public Action<byte[]> OnDataRouterReceived { get; set; }

        private bool Disposed;

        public abstract void Dispose();

    }
}
