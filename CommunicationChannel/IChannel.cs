using System;

namespace CommunicationChannel
{
    public interface IChannel
    {
        /// <summary>
        /// Sends a message to the server or router. The message is sent to the router, which then distributes it to the clients.
        /// </summary>
        /// <param name="chatId"></param>
        /// <param name="dataToSend"></param>
        /// <param name="directlyWithoutSpooler"></param>
        void SendPostToServer(ulong chatId, byte[] dataToSend, bool directlyWithoutSpooler = false);

        /// <summary>
        /// Sends data to the router. This method is used to send data that is not specifically a message to a client, but rather a command or data that the router needs to process.
        /// </summary>
        /// <param name="dataToSend"></param>
        void SendRouterData(byte[] dataToSend);

        public static bool InternetAccess { get; set; }
        public static bool PipeAccess { get; set; }

        /// <summary>
        /// Indicates whether the channel has connectivity. This property is used to determine if the channel can establish connections and communicate with the router.
        /// </summary>
        public bool HasConnectivity { get; }

        /// <summary>
        /// Indicates whether the channel is available for use. In some scenarios some channels cannot be used, in which case it makes no sense to create instances of them.
        /// A value of false does not indicate a lack of connectivity, but the permanent physical ability to establish connections: For example, the lack of a network card and/or hardware infrastructure to initiate this type of connection.
        /// </summary>
        public static bool IsAvailable { get; }

        /// <summary>
        /// Indicates whether the channel is connected to the router and can send and receive data.
        /// </summary>
        bool IsConnected { get; }

        /// <summary>
        /// Last command received from the router
        /// </summary>
        Protocol.Command LastCommandIN { get; }

        /// <summary>
        /// Last command sent to the router
        /// </summary>
        Protocol.Command LastCommandOUT { get; }

        /// <summary>
        /// Last time data was received a command from the router
        /// </summary>
        DateTime LastIN { get; }

        /// <summary>
        /// Last time data was sent a command to the router
        /// </summary>
        DateTime LastOUT { get; }

        /// <summary>
        /// Indicates whether the license has expired. The router in systems that require authentication, refuses communications if the license is not valid (this will be determined at the time of authentication during the connection)
        /// </summary>
        bool LicenseExpired { get; }

        /// <summary>
        /// Indicates successful authentication with the router
        /// </summary>
        bool Logged { get; }

        /// <summary>
        /// Routine that is executed when router-originated data is received for this client
        /// </summary>
        public Action<byte[]> OnDataRouterReceived { get; set; }

        /// <summary>
        /// It is executed upon the arrival of messages generated by other clients and destined for this client.
        /// </summary>
        public Action<ulong, byte[]> OnMessageReceived { get; set; }

        public Action<bool> OnRouterConnectionChange { get; set; }

        /// <summary>
        /// Re-establishes the connection to the router. This method is used when the connection is lost or needs to be re-established for any reason.
        /// </summary>
        public void ReEstablishConnection();

        void Dispose();
    }
}